  Dart_handle tri = lcc.make_triangle(p1, p2, p3);
  lcc.make_triangle(p3, p4, p5);
  Dart_handle tri2 = lcc.make_triangle(p2, p1, p4);
  lcc.sew<2>(tri, tri2);
  // One dart per edge of triangle
  for(LCC::One_dart_per_incident_cell_range<1,2>::iterator tri_it = lcc.one_dart_per_incident_cell<1, 2>(tri).begin(), tri_itend = lcc.one_dart_per_incident_cell<1,2>(tri).end(); tri_it!=tri_itend; ++tri_it){
    std::cout << "0: " << lcc.point(tri_it) << std::endl;
    std::cout << "1: " << lcc.point(lcc.beta(tri_it, 1)) << std::endl;
  }
  // One dart per triangle of tetrahedron
  Dart_handle tet = lcc.make_tetrahedron(p1, p2, p3, p4);
  Dart_handle tet2 = lcc.make_tetrahedron(p2, p1, p3, o);
  lcc.sew<3>(tet, tet2);
  for(LCC::One_dart_per_incident_cell_range<2,3>::iterator tet_it = lcc.one_dart_per_incident_cell<2, 3>(tet).begin(), tet_end = lcc.one_dart_per_incident_cell<2,3>(tet).end(); tet_it!=tet_end; ++tet_it){
    std::cout << "0: " << lcc.point(tet_it) << std::endl;
    std::cout << "1: " << lcc.point(lcc.beta(tet_it, 1)) << std::endl;
  } 