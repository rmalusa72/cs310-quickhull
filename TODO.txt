TODO

Input: List of dD points
Output: Combinatorial map of dD polyhedron
(Output conversion: what format does ex. geomview take?)

Quickhull steps
Find extreme, non-degenerate points and create simplex
	- Iterate through points
	- Check for degeneracies
	- Turn d+1 points into simplex
Maintain list of facets
	- What kind of list?
	- How to store facet - one dart from it? 
Check if points are above facets
	- Find d-1D directed hyperplane through facets
	- Find signed distance from point to facet
	- Does CGAL provide these things?
Sort points into outside sets
	- List of outside sets corresponding to list of facets
	- Save distance to not have to recalculate it to find furthest point? 
Pick a facet, get furthest point, find visible set
	- Start with facet it is above
	- Go to adjacent facets (need way to get adjacent facets)
	- Keep track of which facets have been visited (this is a search)
	- Find boundary of visible region (ppt has example of how to do this) and get ridges on it
Form facets connecting those ridges to furthest point
	- Deal with possibility that coplanar facets are created :/ (again see ppt)
	- Write function to do this joining
	- Link facets to their neighbors
Remove facets in visible set from list of facets, add their points to unsorted list
Sort points again

Dealing with degenerate cases: Bad. A secondary stage

